#!/usr/bin/python
# Filename    : CVE_Analyzer
#
import optparse
import sys
import pandas as pd

class CVE:
    '''
    CVE class analyzes the results (CVE Entries) in CSV format.
    '''
    # Initialize with the CVEs in CSV format
    def __init__(self, data_file, sep=","):
        try:
            self.data = pd.read_csv(data_file, error_bad_lines=False,
                                    sep=sep, usecols=['CVE ID'])
        except:
            error = "Do you have a column 'CVE ID'? Did you use right separator?"
            print "Failed to read CSV file '", data_file, "'.", error
            print "Exception : ", sys.exc_info()[0]
            sys.exit(-1)

    # No of entries in the instance
    def __len__(self):
        return len(self.data)

    # Print the CVEs
    def __str__(self):
        return str(self.data)
    
    # Compares the data with the provided data
    def compare(self, actual_data):
        result = self.data.isin(actual_data.data)
        return result

    # True Positive - When the CVE's are present in both the data's
    def true_positives(self, result):
        return result[result['CVE ID']]

# Define the Options
parser = optparse.OptionParser()
parser.add_option("-b", "--base", dest="base_data_file",
                  help="Base Data File in CSV Format")
parser.add_option("-f", "--results", dest="results_data_file",
                  help="Actual Results Data to be compared with Base Data in CSV")
# Parse the Arguments
(options, args) = parser.parse_args()
# Exit with Error message, when the required options are missing
if not options.base_data_file:
    parser.error("'-b' is required.")
if not options.results_data_file:
    parser.error("'-f' is required.")

# Read the Base Data
base_data = CVE(data_file=options.base_data_file)
base_data_cves = len(base_data)
# Read the Actual Results Data
data = CVE(data_file=options.results_data_file, sep="\t")
data_cves = len(data)
# Compare the Actual Results Data with the Base Data
result = data.compare(base_data)
# Get True Positives from the Compared Results
true_pos = data.true_positives(result)
no_of_true_pos = len(true_pos)
# Print the Summary
print "# of CVE's in Base Data     : ", base_data_cves
print "# of CVE's in Provided Data : ", data_cves
print "# of True Positives         : ", no_of_true_pos
# False Negative - When the CVE is present in base data
#                     and it's not present in provided data
print "# of False Negatives        : ", (base_data_cves - no_of_true_pos)
# False Positive - When the CVE is not present in base data
#                      and it's present in provided data
print "# of False Positives        : ", (data_cves - no_of_true_pos)
